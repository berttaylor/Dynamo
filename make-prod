# Prod-specific Makefile
.PHONY: springclean

# Generic declarations
PROJECT = collabl
INSTALL = pip install

# Sets commands for individual containers
BACKEND_RUN = docker-compose -f docker-compose.prod.yml run --rm web /bin/bash -c
BACKEND_EXEC = docker-compose -f docker-compose.prod.yml exec web /bin/bash -c

WORKER_RUN = docker-compose -f docker-compose.prod.yml run --rm worker /bin/bash -c
WORKER_EXEC = docker-compose -f docker-compose.prod.yml exec worker /bin/bash -c

DATABASE_RUN = docker-compose -f docker-compose.prod.yml run --rm db /bin/bash -c
DATABASE_EXEC = docker-compose -f docker-compose.prod.yml exec db bash -c

# Includes and exports environment variables for Database
include .env.prod
export

# Build one named container
build:
	docker-compose -f docker-compose.prod.yml build --no-cache $(CONT)

# Deployment checks
deploy_check:
	$(BACKEND_RUN) "cd $(PROJECT); ./manage.py check --deploy"

# Build all containers
buildall:
	docker-compose -f docker-compose.prod.yml build
	docker-compose -f docker-compose.prod.yml up

up:
	docker-compose -f docker-compose.prod.yml up

down:
	docker-compose -f docker-compose.prod.yml down --remove-orphans

# Pass this a container name to reboot it
# Needed if you make changes to Django's application layer or admin files
restart:
	docker-compose -f docker-compose.dev.yml restart $(CONT)

killdocker:
	docker kill $(docker ps -q)

fullrebuild:
	docker-compose -f docker-compose.prod.yml down --rmi local -v
	docker-compose -f docker-compose.prod.yml build --no-cache
	docker-compose -f docker-compose.prod.yml up

# DATABASE - Migration & DB tools

# Makes migrations for a single named app
makemigrations:
	$(BACKEND_RUN) "cd $(PROJECT); ./manage.py makemigrations"

migrate:
	$(BACKEND_RUN) "cd $(PROJECT); ./manage.py migrate;"

# Used specifically for the first load operation after cloning the repo down
initialisebackend: makeallmigrations migrate createadmin

#fixtures
dumpfixtures:
	$(BACKEND_RUN) "cd $(PROJECT); ./manage.py dumpdata -o fixtures/fixtures.json -e auth -e admin -e sessions -e contenttypes -e axes"

loadfixtures:
	$(BACKEND_RUN) "cd $(PROJECT); ./manage.py loaddata fixtures/fixtures.json"

# Starts any registered Celery worker tasks
startbeat:
	$(WORKER_RUN) "celery -A backend worker --beat;"

# GENERAL - General purpose tools
createsuperuser:
	$(BACKEND_RUN) "cd $(PROJECT); ./manage.py createsuperuser;"

collectstatic:
	$(BACKEND_RUN) "cd $(PROJECT); ./manage.py collectstatic --no-input;"

djangocheck:
	$(BACKEND_RUN) "cd $(PROJECT); ./manage.py check;"

djangoshell:
	$(BACKEND_RUN) "cd $(PROJECT); ./manage.py shell;"

# Cleans out any weird temp files that the dependencies throw in during build,
springclean:
	rm -rf $(PROJECT)/backend.egg-info
	rm -rf $(PROJECT)/dist
	rm -rf $(PROJECT)/.tox
	rm -rf $(PROJECT)/.cache
	rm -rf $(PROJECT)/.pytest_cache
	find . -type f -name "*.pyc" -delete
	rm -rf $(find . -type d -name __pycache__)

# Use with CAUTION - drops all local docker stuff
dockerclean:
	docker system prune -f
	docker system prune -f --volumes

# See above
bigclean: springclean dockerclean
