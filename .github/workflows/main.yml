name: Main
on: [push, pull_request]
jobs:

  test:
    name: "Test Code"
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:

      - uses: actions/checkout@v2

      - name: Set Up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - name: Print Python Version
        run: |
          python3 --version

      - name: Generate .env File
        run: |
          touch .env.dev
          echo POSTGRES_DB_PORT=5432 >> .env.dev
          echo POSTGRES_DB_HOST=db >> .env.dev
          echo POSTGRES_HOST_AUTH_METHOD=trust >> .env.dev
          echo POSTGRES_USER=collabl_db_user_dev >> .env.dev
          echo POSTGRES_PASSWORD=rNKu2JPhbVY>NG]N >> .env.dev
          echo POSTGRES_DB=collabl_db_dev >> .env.dev
          echo DJANGO_ALLOWED_HOSTS='localhost 127.0.0.1' >> .env.dev
          echo DJANGO_DEBUG_STATUS=True >> .env.dev
          echo SITE_PROTOCOL=http:// >> .env.dev
          echo SITE_DOMAIN='127.0.0.1:8000' >> .env.dev
          RANDOMKEY=$(python3 -c 'import secrets; print(secrets.token_hex(100))')
          echo DJANGO_SECRET_KEY="${RANDOMKEY}" >> .env.dev
          echo CELERY_BROKER_URL=redis://redis:6379 >> .env.dev
          echo CELERY_TIMEZONE=Europe/London >> .env.dev
          echo CELERY_RESULT_BACKEND=redis://redis:6379 >> .env.dev
          echo CELERY_TASK_SERIALIZER=json >> .env.dev
          echo CELERY_RESULT_SERIALIZER=json >> .env.dev
          echo DEFAULT_SYSTEM_FROM_EMAIL=no-reply@example.com >> .env.dev
          echo DEFAULT_SYSTEM_TO_EMAIL=support@example.com >> .env.dev
          echo EMAIL_HOST=smtp.mailtrap.io >> .env.dev
          echo EMAIL_HOST_USER=TODO >> .env.dev
          echo EMAIL_HOST_PASSWORD=TODO >> .env.dev
          echo EMAIL_PORT=2525 >> .env.dev
          echo DEFAULT_FROM_EMAIL=todo@todo.com >> .env.dev
          echo AWS_ACCESS_KEY_ID=TODO >> .env.dev
          echo AWS_SECRET_ACCESS_KEY=TODO >> .env.dev
          echo AWS_STORAGE_BUCKET_NAME=todo >> .env.dev

      - name: Print .env File
        run: cat .env.dev

      - name: Build Docker Containers
        run: make -f make-dev build

      - name: Check No containers running
        run: |
            docker-compose -f docker-compose.dev.yml down
            docker-compose -f docker-compose.dev.yml ps

      - name: Bring up docker containers in background
        run: |
            docker-compose -f docker-compose.dev.yml up -d
            docker-compose -f docker-compose.dev.yml ps
            docker-compose -f docker-compose.dev.yml logs

      - name: wait for containers to be healthy (This takes longer on github actions, meaning that the test will sometimes fail if we dont wait)
        run: sleep 30

      - name: Make Database Migrations
        run: make -f make-dev migrate

      - name: Run Tests
        run: make -f make-dev runtests
  

  deploy:
    name: "Deploy to Server & Rebuild Docker Containers"
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: test
    steps:
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/prod.key
          chmod 600 ~/.ssh/prod.key
          cat >>~/.ssh/config <<END
          Host prod
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/prod.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.PROD_SSH_USER }}
          SSH_KEY: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.PROD_SSH_HOST }}
          SSH_USER_SUDO_PASS: ${{ secrets.SSH_USER_SUDO_PASS }}

      - name: Pull Down the New Files
        run: ssh prod 'cd app && git fetch && git reset --hard origin/main'

      - name: Rebuild Docker Containers
        run: ssh prod 'cd app && sudo make -f make-prod build'

      - name: Migrate Database Changes
        run: ssh prod 'cd app && make -f make-prod migrate'

      - name: Restart Docker Containers
        run: ssh prod 'cd app && make -f make-prod restart'